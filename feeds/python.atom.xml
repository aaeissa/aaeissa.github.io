<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ahmed Eissa</title><link href="https://aaeissa.github.io/" rel="alternate"></link><link href="https://aaeissa.github.io/feeds/python.atom.xml" rel="self"></link><id>https://aaeissa.github.io/</id><updated>2017-07-08T12:00:00-04:00</updated><entry><title>Changing Metadata with Python</title><link href="https://aaeissa.github.io/meta.html" rel="alternate"></link><published>2017-07-08T12:00:00-04:00</published><updated>2017-07-08T12:00:00-04:00</updated><author><name>Ahmed Eissa</name></author><id>tag:aaeissa.github.io,2017-07-08:meta.html</id><summary type="html">&lt;h3&gt;Election Emails&lt;/h3&gt;
&lt;p&gt;In early May, near the tail end of the contentious French presidential election, then-candidate and now-President Emmanuel Macron's campaign was targeted by who many security experts thought to be APT28 - an advanced, offensive Russian hacking group. &lt;/p&gt;
&lt;p&gt;Less than 48 hours before the election, download links to 9GB of emails from Macron's party were anonymously published on Pastebin. Shortly thereafter, the &lt;em&gt;En Marche!&lt;/em&gt; political party confirmed the breach in a &lt;a href="https://www.wired.com/2017/05/macron-email-hack-french-election/"&gt;public statement&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The En Marche! party has been the victim of a massive, coordinated act of hacking, in which diverse internal information (mails, documents, accounting, contracts) have been broadcast this evening on social networks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But most importantly, the party warned any would-be purveyors of the stolen data that there was no way to guarantee their authenticity, implying that the attackers could have (and likely did) planted disinformation. &lt;/p&gt;
&lt;h3&gt;False Flags&lt;/h3&gt;
&lt;p&gt;The trove of data contained several MS Word documents with Cyrillic-character metadata. To some, these artifacts were the smoking gun - but metadata can be fake.&lt;/p&gt;
&lt;p&gt;MS Word documents, also known as &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML"&gt;Office Open XML Documents&lt;/a&gt;,&lt;/em&gt; are essentially zipped archives (they contain other files and folders).&lt;/p&gt;
&lt;p&gt;If you want to quickly test this, create a "test.docx" file and rename it to "test.zip." Extract the files from the archive, and you should be left with the following directory structure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-- test.zip&lt;br /&gt;
| -- rels/&lt;br /&gt;
| -- docProps/&lt;br /&gt;
| -- -- app.xml&lt;br /&gt;
| -- -- core.xml&lt;br /&gt;
| -- word/  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;core.xml&lt;/code&gt; file contains all of the metadata for your file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;coreProperties&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://schemas.openxmlformats.org/package/2006/metadata/core-properties&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://purl.org/dc/elements/1.1/&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dcmitype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://purl.org/dc/dcmitype/&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dcterms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://purl.org/dc/terms/&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xsi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;creator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;goodguy&lt;/span&gt;&lt;span class="nd"&gt;@original.com&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;creator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lastModifiedBy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;goodguy&lt;/span&gt;&lt;span class="nd"&gt;@original.com&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lastModifiedBy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dcterms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;xsi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dcterms:W3CDTF&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="n"&gt;T19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dcterms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dcterms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="n"&gt;xsi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dcterms:W3CDTF&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="n"&gt;T19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dcterms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;coreProperties&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As is mentioned in the article "&lt;a href="https://blog.0day.rocks/lets-get-fancy-with-false-flags-28eaabefeff6"&gt;Let's get fancy with flase flags&lt;/a&gt;", it's trivially easy to alter this metadata.&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;Equipped with the &lt;code&gt;python-docx&lt;/code&gt; module (documentation &lt;a href="https://python-docx.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;), we can quickly change any of the fields in the &lt;code&gt;core.xml&lt;/code&gt; file with just a few lines of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docx&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.docx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;goodguy@original.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_modified_by&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;goodguy@original.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;badguy&lt;/span&gt;&lt;span class="nd"&gt;@changed.com&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;badguy@changed.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;meta.docx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Attribution&lt;/h3&gt;
&lt;p&gt;Why is any of this important? Because attribution can be really, really difficult, and the geopolitical ramifications can be significant. As the security research &lt;a href="https://twitter.com/x0rz?lang=en"&gt;x0rz&lt;/a&gt; points out in the aforementioned article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Metadata might only give us clues. It needs to be corroborated with other sources of intelligence or you’ll fail miserably at threat intel."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although the example of MS Word documents may seem overly simplistic, it still highlights the basic principle. Allow me to reference yet another security researcher known only by their handle, &lt;a href="https://medium.com/@thegrugq/idle-thoughts-on-cyber-82170b2b7280"&gt;the grugq&lt;/a&gt;, detailing the complexity of "proof" in intelligence investigations:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"It will probably be a bunch of circumstantial evidence, a complexity of timelines, snippets of information from various sources with different levels of confidentiality and reliability. This patchwork of data needs to be processed and analyzed via complicated techniques designed to reduce cognitive bias. All of this, only to arrive at a sort of high probability of &lt;em&gt;maybe&lt;/em&gt;."&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Metadata"></category><category term="Python"></category></entry><entry><title>Automating Social Media Reconnaissance</title><link href="https://aaeissa.github.io/recon-ng.html" rel="alternate"></link><published>2017-06-05T12:00:00-04:00</published><updated>2017-06-05T12:00:00-04:00</updated><author><name>Ahmed Eissa</name></author><id>tag:aaeissa.github.io,2017-06-05:recon-ng.html</id><summary type="html">&lt;h2&gt;Risk in the Age of Social Media&lt;/h2&gt;
&lt;p&gt;Consider this: maybe your LinkedIn profile is a little &lt;em&gt;too&lt;/em&gt; detailed, and maybe you should stop attaching your location to your tweets, especially while at work. &lt;/p&gt;
&lt;p&gt;Social media is a rich source of open source intellgience (OSINT), and measuring social media exposure is becoming progressively more common in penetration testing and operational security.&lt;/p&gt;
&lt;p&gt;Because there are dozens of free collection tools that allow anyone to systematically harvest and analyze these public posts, the ubiquity of social media brings with it organizational risks that businesses are still learning how to mitigate.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Recon-ng&lt;/em&gt;, one of the more comprehensive tools, is a web reconnaissance framework that comes pre-installed with Kali Linux and can be used to automate the collection and visualization of social media posts that contain geographic metadata.&lt;/p&gt;
&lt;p&gt;Visualizing collected posts for a specificed geographic location can lead to some great insights, which recon-ng provides via its &lt;em&gt;pushpins&lt;/em&gt; feature, which grabs location metadata (latitude, longitude) from geo-tagged posts in a defined radius and plots them with Google Maps.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Map" src="./images/map2.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;Tim Tomes, the author of recon-ng, has a great video (&lt;a href="https://www.youtube.com/watch?v=BwopO7dxT98"&gt;Recon-ng Pushpin Intro&lt;/a&gt;) which can quickly bring you up to speed on the feature before we make a small change to the source, and ultimately automate the framework's collection capabilities.&lt;/p&gt;
&lt;p&gt;Recon-ng comes with modules for pulling posts from Flickr, Instagram, Picasa, Shodan, Twitter, and Youtube. For the sake of simplicity (not to mention, &lt;a href="https://dev.twitter.com/overview/api/tweets"&gt;a single tweet&lt;/a&gt; has &lt;em&gt;a lot&lt;/em&gt; of data), we'll just use Twitter. &lt;/p&gt;
&lt;h2&gt;Clone the Source&lt;/h2&gt;
&lt;p&gt;There's a small problem with recon-ng's default Twitter module. By default, every &lt;code&gt;GET&lt;/code&gt; request to Twitter's Search API returns 15 tweets per page. But to get the most out of our collection, it's in our interest to raise the limit. &lt;/p&gt;
&lt;p&gt;Open up a terminal in your Kali Linux VM and enter &lt;code&gt;git clone https://bitbucket.org/LaNMaSteR53/recon-ng.git&lt;/code&gt; to clone the source onto your machine.&lt;/p&gt;
&lt;p&gt;The file structure should (roughly) look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-- recon-ng&lt;br /&gt;
| -- data/&lt;br /&gt;
| -- modules/&lt;br /&gt;
| -- recon/&lt;br /&gt;
| -- recon-cli&lt;br /&gt;
| -- recon-ng&lt;br /&gt;
| -- recon-rpc&lt;br /&gt;
| -- recon-web  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Modify the Twitter Module&lt;/h2&gt;
&lt;p&gt;To retrieve more than the default number of tweets per page (15), we need to add a &lt;code&gt;count&lt;/code&gt; paramter to the &lt;code&gt;GET&lt;/code&gt; request in &lt;code&gt;twitter.py&lt;/code&gt; which can be found at &lt;code&gt;recon-ng/modules/locations-pushpins/twitter.py&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The original code in the &lt;code&gt;module_run&lt;/code&gt; function should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;radius&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.twitter.com/1.1/search/tweets.json&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Collecting data for an unknown number of tweets...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_twitter_api&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;geocode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;km&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add &lt;code&gt;'count':'100'&lt;/code&gt; after &lt;code&gt;geocode&lt;/code&gt; so that the &lt;code&gt;results&lt;/code&gt; variable looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_twitter_api&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;geocode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;km&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This added parameter will return the maxium number (100) of tweets per page in your call to Twitter's Search API. &lt;/p&gt;
&lt;h2&gt;Beginning Collection&lt;/h2&gt;
&lt;p&gt;Before we're ready to automate the collection process, there's some minimal setup involved. &lt;/p&gt;
&lt;p&gt;Inside of the cloned &lt;code&gt;recon-ng&lt;/code&gt; repositoy should be (&lt;em&gt;another&lt;/em&gt;) &lt;code&gt;recon-ng&lt;/code&gt; - but this is the executable included with the source. &lt;/p&gt;
&lt;p&gt;Start the framework by entering &lt;code&gt;./recon-ng&lt;/code&gt; into your terminal.&lt;/p&gt;
&lt;h4&gt;API Keys&lt;/h4&gt;
&lt;p&gt;After acquiring &lt;a href="https://apps.twitter.com/"&gt;Twitter API keys&lt;/a&gt;, store them in recon-ng's &lt;em&gt;Keys&lt;/em&gt; table by entering your access and secret keys with the &lt;code&gt;keys add twitter_api &amp;lt;YOUR_KEY&amp;gt;&lt;/code&gt; and &lt;code&gt;keys add twitter_secret &amp;lt;YOUR_KEY&amp;gt;&lt;/code&gt; commands. (To view any API keys you have stored in recon-ng, enter &lt;code&gt;keys list&lt;/code&gt;.)&lt;/p&gt;
&lt;h4&gt;Workspaces&lt;/h4&gt;
&lt;p&gt;In recon-ng, workspaces are containers that allow you to collect and store reconnaissance for specific projects and/or targets. Results from any modules you may run within this workspace will &lt;em&gt;only&lt;/em&gt; be stored in the current workspace's tables.&lt;/p&gt;
&lt;p&gt;For our purposes, we'll create a workspace called "twitter_recon" with the command &lt;code&gt;workspaces add twitter_recon&lt;/code&gt; - yes, it's pretty intuitive.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;workspaces select twitter_recon&lt;/code&gt; will place you into this workspace (and if you don't select one, you're placed in the &lt;code&gt;default&lt;/code&gt; workspace). &lt;/p&gt;
&lt;h4&gt;Locations&lt;/h4&gt;
&lt;p&gt;Remember, database interaction is the central mechanism in the recon-ng framework. Just like the &lt;em&gt;Keys&lt;/em&gt; table for your API credentials, the &lt;em&gt;Locations&lt;/em&gt; table allows users to store addresses and coordinates.&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;add locations&lt;/code&gt;. Assuming that you don't know the latititude and longitude of your target locations, skip those options when prompted (press enter), but specify an address.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;geocode&lt;/code&gt; module will provide the exact latitude and longitude of the target address. Enter &lt;code&gt;load recon/locations-locations/geocode&lt;/code&gt; and then &lt;code&gt;run&lt;/code&gt;. The &lt;code&gt;show locations&lt;/code&gt; command will print the &lt;em&gt;Locations&lt;/em&gt; table, which should now have a completed row (latititude, longitude, address).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Locations Table" src="./images/locations.JPG" /&gt;&lt;/p&gt;
&lt;h4&gt;Twitter Search&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;twitter.py&lt;/code&gt; module we modified will use Twitter's Search API to pull tweets that were created within close proximity to the target location. Load the module by entering &lt;code&gt;load recon/locations-pushpins/twitter&lt;/code&gt; and then - you guessed it - &lt;code&gt;run&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Results are stored as &lt;em&gt;pushpins&lt;/em&gt; for the map that we're going to produce at the end. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;show dashboard&lt;/code&gt; command will present a brief overview of your activity and results, including how many times you've run each module in the current workspace, and how many pushpins (tweets, in our case) you've harvested.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dashboard" src="./images/dashboard.JPG" /&gt;&lt;/p&gt;
&lt;h4&gt;Reporting &amp;amp; Visualizing&lt;/h4&gt;
&lt;p&gt;Remember, the point of this exercise is to visualize the geotagged social media posts we've collected and plot them within a specified radius of our target locations. &lt;/p&gt;
&lt;p&gt;Recon-ng's &lt;em&gt;reporting&lt;/em&gt; module makes this effortless. Enter these commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;load reporting/pushpins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show locations&lt;/code&gt; (note: this just makes the next steps easier)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LATITUDE &amp;lt;target_latitiude_goes_here&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LONGITUDE &amp;lt;target_longitude_goes_here&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set RADIUS 1&lt;/code&gt; (note: if the target is in an urban or heavily populated area, set the radius to 0.5)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After following these steps, the &lt;code&gt;reporting/pushpins&lt;/code&gt; module will generate two reports in your browser. The first will chronologically list all of your pushpins in a column (which we're not concerned with here), and the second will plot all of the geotagged posts as pushpins on a Google map.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Map" src="./images/map3.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;You can interact with any of these pushpins. Each pushpin has a link to the user's Twitter profile and a link to the specific tweet that you collected.&lt;/p&gt;
&lt;h2&gt;Automating the Process&lt;/h2&gt;
&lt;p&gt;With the help of a resource file and cron job, we won't have to repeat these steps every time we want to collect geotagged posts and store them in our workspace. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource file&lt;/strong&gt;: a text file with the commands you want the recon-ng framework to run automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cron job&lt;/strong&gt;: a program that allows &lt;a href="http://www.unixgeeks.org/security/newbie/unix/cron-1.html"&gt;Unix users&lt;/a&gt; to automatically execute commands and/or scripts at a specified point in time. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Creating a Resource File&lt;/h3&gt;
&lt;p&gt;For the sake of being explicit, create a new file called &lt;code&gt;commands.txt&lt;/code&gt; in the same directory as your &lt;code&gt;recon-ng&lt;/code&gt; executable and add the following lines to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;workspaces select &amp;lt;your_workspace_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load recon/locations-pushpins/twitter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because there's only a need to automate &lt;em&gt;collection&lt;/em&gt;, the commands to generate the reports will be ommitted from the resource file (you won't need to look at the map every minute of the day).&lt;/p&gt;
&lt;p&gt;If you want to visualize how the resource file feeds your commands to recon-ng, enter the following command in your terminal: &lt;code&gt;./recon-ng -r commands.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You should see the recon-ng framework start up and enter your specificed workspace, load and run the Twitter module, and exit. &lt;/p&gt;
&lt;h4&gt;Creating a Cron Job&lt;/h4&gt;
&lt;p&gt;Entering &lt;code&gt;sudo contab -e&lt;/code&gt; in your terminal will allow you to create new cron jobs, as well as edit any existing cron jobs you may have&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. All cron jobs are added as a single line to the bottom of the file. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Cron" src="./images/cron.JPG" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* * * * *&lt;/code&gt;: runs every minute of every day&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ~/recon-ng&lt;/code&gt;: enter the recon-ng directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./recon-ng -r commands.txt&lt;/code&gt;: runs the recon-ng executable with our resource fle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's slightly overkill to pull from the Twitter API every minute of every day, but it doesn't really matter for our purposes - duplicate results aren't  stored in your workspace's tables. &lt;/p&gt;
&lt;p&gt;Whenever you want to check your results, fire up &lt;code&gt;./recon-ng&lt;/code&gt; in your terminal, load the &lt;em&gt;reporting/pushpins&lt;/em&gt; module, and run it (you don't need to set the latitude, longitude, and radius again). &lt;/p&gt;
&lt;h4&gt;Troubleshooting Tip&lt;/h4&gt;
&lt;p&gt;Because the cronjob doesn't run the recon-ng in your terminal, you're not going to &lt;em&gt;see&lt;/em&gt; it run at whatever interval you specified it to. A simple way to ensure that your your cron job is working is to spin up recon-ng, enter your workspace, and run the &lt;code&gt;show dashboard&lt;/code&gt; command again. If the &lt;code&gt;Runs&lt;/code&gt; count for the &lt;code&gt;recon/locations-pushpins/twitter&lt;/code&gt; is increasing, your cron job is working!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Cron jobs can sometimes be difficult. In my experience, most issues with cron jobs have turned out to be filepath and permission issues. You can find a more detailed introduction to cron jobs &lt;a href="https://code.tutsplus.com/tutorials/scheduling-tasks-with-cron-jobs--net-8800"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="OSINT"></category><category term="Python"></category><category term="Twitter"></category></entry></feed>